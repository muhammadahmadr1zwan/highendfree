generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  buyer
  seller
  admin
}

enum UserStatus {
  active
  banned
  suspended
}

enum RequestStatus {
  pending
  approved
  denied
  received
  review_enabled
  reviewed
  refunded
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  password  String
  name      String?
  role      Role        @default(buyer)
  status    UserStatus  @default(active)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  products  Product[]
  requests  Request[]   @relation("BuyerRequests")
  subscriptions Subscription[]
}

model Product {
  id          String   @id @default(uuid())
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    String
  title       String
  description String
  category    String
  country     String
  priceCents  Int
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requests    Request[]
}

model Request {
  id           String         @id @default(uuid())
  product      Product        @relation(fields: [productId], references: [id])
  productId    String
  buyer        User           @relation("BuyerRequests", fields: [buyerId], references: [id])
  buyerId      String
  status       RequestStatus  @default(pending)
  screenshotUrl String?
  paypalTransactionId String?
  reviewEnabledAt DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  priceCents  Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  planId      String
  status      String   @default("active")
  startDate   DateTime @default(now())
  endDate     DateTime?
}

model ActivityLog {
  id        String   @id @default(uuid())
  type      String
  actorId   String?
  details   String?
  createdAt DateTime @default(now())
}
